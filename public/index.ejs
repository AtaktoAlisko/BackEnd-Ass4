<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cryptocurrency</title>
    <script src="https://cdn.jsdelivr.net/npm/ol@v8.2.0/dist/ol.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/ol@v8.2.0/ol.css"
    />
    <link rel="stylesheet" href="styles.css" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <style>
      #timer {
        font-size: 24px;
        margin-bottom: 10px;
      }
      .carousel-item img {
        width: 100%;
        height: auto;
      }
    </style>
  </head>
  <body class="bg-sky-300">
    <nav class="bg-gray-800 p-4 flex items-center justify-between">
      <div class="block lg:hidden">
        <button
          id="nav-toggle"
          class="flex items-center px-3 py-2 border rounded text-gray-200 border-gray-400 hover:text-white hover:border-white"
        >
          <svg
            class="fill-current h-3 w-3"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
          >
            <title>Menu</title>
            <path d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z" />
          </svg>
        </button>
      </div>
      <div
        class="w-full block flex-grow lg:flex lg:items-center lg:w-auto hidden"
        id="nav-content"
      >
        <div class="items-center text-white mr-6">
          <span
            class="font-semibold text-xl tracking-tight border-b-2 border-gray-800 pb-1"
            >Cryptocurrency</span
          >
        </div>

        <div class="text-sm lg:flex-grow">
          <a
            href="/"
            class="block mt-4 lg:inline-block lg:mt-0 text-gray-200 hover:text-white mr-4"
            >Home</a
          >
          <a
            href="/BTC"
            class="block mt-4 lg:inline-block lg:mt-0 text-gray-200 hover:text-white mr-4"
            >BTC</a
          >
          <a
            href="/history"
            class="block mt-4 lg:inline-block lg:mt-0 text-gray-200 hover:text-white mr-4"
            >History</a
          >
          <a
            href="/KryptDashboard"
            class="block mt-4 lg:inline-block lg:mt-0 text-gray-200 hover:text-white mr-4"
          ></a>
        </div>

        <ul class="flex items-center mr-80">
          <!-- Добавляем пункт меню для кнопки перевода -->
          <li class="nav-item">
            <div id="google_translate_element"></div>
          </li>
        </ul>

        <div class="text-sm">
          <a
            href="/signup"
            class="block mt-4 lg:inline-block lg:mt-0 text-gray-200 hover:text-white mr-4"
            >Signup</a
          >
          <a
            href="/login"
            class="block mt-4 lg:inline-block lg:mt-0 text-gray-200 hover:text-white"
            >Login</a
          >
        </div>
      </div>
    </nav>

    <h3 id="city-label"></h3>

    <table id="cryptoTable">
      <!-- Your table content goes here -->
    </table>

    <div class="table">
      <div style="max-width: 1750px; margin: 0 auto">
        <div
          style="
            display: flex;
            flex-direction: column;
            justify-content: space-between;
          "
        >
          <div class="container mt-4">
            <div class="row justify-content-center">
              <% exchanges.forEach((exchange, exchangeIndex) => { %> <% if
              (exchangeIndex % 2 === 0) { %>
              <div class="col-md-6 mb-4"></div>
              <!-- This ensures a new row starts after every two exchanges -->
              <% } %>
              <div class="col-md-12">
                <div
                  id="exchangeCarousel<%= exchangeIndex %>"
                  class="carousel slide"
                  data-bs-ride="carousel"
                >
                  <div class="carousel-inner">
                    <% exchange.links.forEach(function(link, index) { %>
                    <div
                      class="carousel-item <%= index === 0 ? 'active' : '' %>"
                    >
                      <img
                        src="<%= link %>"
                        class="d-block w-100 carousel-img"
                        alt="..."
                      />
                    </div>
                    <% }); %>
                  </div>
                  <button
                    class="carousel-control-prev"
                    type="button"
                    data-bs-target="#exchangeCarousel<%= exchangeIndex %>"
                    data-bs-slide="prev"
                  >
                    <span
                      class="carousel-control-prev-icon"
                      aria-hidden="true"
                    ></span>
                    <span class="visually-hidden">Previous</span>
                  </button>
                  <button
                    class="carousel-control-next"
                    type="button"
                    data-bs-target="#exchangeCarousel<%= exchangeIndex %>"
                    data-bs-slide="next"
                  >
                    <span
                      class="carousel-control-next-icon"
                      aria-hidden="true"
                    ></span>
                    <span class="visually-hidden">Next</span>
                  </button>
                </div>
              </div>
              <% }); %>
            </div>
          </div>
        </div>
      </div>

      <table class="table border-collapse mt-20">
        <thead>
          <tr>
            <th class="px-4 py-2">UUID</th>
            <th class="px-4 py-2">Btc Price</th>
            <th class="px-4 py-2">Rank</th>
            <th class="px-4 py-2">Tier</th>
            <th class="px-4 py-2">Name</th>
            <th class="px-4 py-2">Price</th>
            <th class="px-4 py-2">Symbol</th>
          </tr>
        </thead>
        <tbody id="data">
          <tr class="bg-amber-400">
            <td>Total received(SAT)</td>
            <td id="wallet-recv">no data</td>
          </tr>
          <tr class="bg-amber-500">
            <td>Total sent(SAT)</td>
            <td id="wallet-sent">no data</td>
          </tr>
          <tr class="bg-amber-600">
            <td>Balance(SAT)</td>
            <td id="wallet-bal">no data</td>
          </tr>
        </tbody>
      </table>
    </div>

    <br />
    <h1>Timed Quiz</h1>
    <p>Answer the following questions within the time limit.</p>
    <div id="timer">Time Remaining: 5:00</div>
    <div id="quiz-questions">
      <!-- Quiz questions and options go here -->
    </div>
    <button id="submit-btn">Submit Quiz</button>

    <!-- Social media sharing buttons -->
    <div id="social-sharing-buttons">
      <button onclick="shareOnFacebook()">Share on Facebook</button>
      <button onclick="shareOnTwitter()">Share on Twitter</button>
    </div>

    <footer class="bg-gray-800">
      <h3>Murat Alibek SE-2207</h3>
    </footer>

    <script>
      const quizDurationSeconds = 300; // 5 minutes
      let remainingTime = quizDurationSeconds;
      const timerDisplay = document.getElementById("timer");

      // Update timer display
      function updateTimerDisplay() {
        const minutes = Math.floor(remainingTime / 60);
        const seconds = remainingTime % 60;
        timerDisplay.textContent = `Time Remaining: ${minutes}:${
          seconds < 10 ? "0" : ""
        }${seconds}`;
      }

      // Start countdown timer
      const timerInterval = setInterval(() => {
        remainingTime--;
        updateTimerDisplay();

        // Check if time has run out
        if (remainingTime <= 0) {
          clearInterval(timerInterval);
          // Automatically submit the quiz when time runs out
          submitQuiz();
        }
      }, 1000);

      // Function to submit the quiz
      function submitQuiz() {
        // Your logic for submitting the quiz goes here
        alert("Time is up! Quiz will be submitted.");
      }

      // Social media sharing functions
      function shareOnFacebook() {
        const shareUrl = "https://example.com/quiz-results";
        const shareText = "I just completed the quiz! Check out my results.";
        const facebookShareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(
          shareUrl
        )}&quote=${encodeURIComponent(shareText)}`;
        window.open(facebookShareUrl, "_blank");
      }

      function shareOnTwitter() {
        const shareUrl = "https://example.com/quiz-results";
        const shareText = "I just completed the quiz! Check out my results.";
        const twitterShareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(
          shareUrl
        )}&text=${encodeURIComponent(shareText)}`;
        window.open(twitterShareUrl, "_blank");
      }

      var baseUrl = "https://api.coinranking.com/v2/coins";
      const apiKey =
        "coinranking5da3ce083c9eead6007e8f2799be4b929b5b1dbc23388aa2";

      var apiUrl = `${baseUrl}`;
      console.log(apiUrl);

      fetch(`${baseUrl}`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          "X-My-Custom-Header": `${apiKey}`,
        },
        mode: "cors", // Add this line to set CORS mode
      })
        .then((response) => {
          if (response.ok) {
            response.json().then((json) => {
              console.log(json.data);
              let coinsData = json.data.coins;

              if (coinsData.length > 0) {
                var cryptoCoin = "";
              }
              //For Loop Starts
              coinsData.forEach((coin) => {
                cryptoCoin += "<tr>";
                cryptoCoin += `<td> ${coin.uuid} </td>`;
                cryptoCoin += `<td> ${coin.btcPrice} </td>`;
                cryptoCoin += `<td> ${coin.rank}</td>`;
                cryptoCoin += `<td> ${coin.tier} </td>`;
                cryptoCoin += `<td> ${coin.name}</td>`;
                cryptoCoin += `<td> $${Math.round(coin.price)} Billion</td>`;
                cryptoCoin += `<td> ${coin.symbol}</td>`;
                ("<tr>");
              });
              document.getElementById("data").innerHTML = cryptoCoin;
            });
          }
        })
        .catch((error) => {
          console.log(error);
        });

      // Google Translate код
      function googleTranslateElementInit() {
        new google.translate.TranslateElement(
          { pageLanguage: "en" },
          "google_translate_element"
        );
      }
    </script>
    <script
      type="text/javascript"
      src="https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit"
    ></script>
  </body>
</html>
